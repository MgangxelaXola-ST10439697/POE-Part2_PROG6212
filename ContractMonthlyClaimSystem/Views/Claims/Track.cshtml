@model IEnumerable<ContractMonthlyClaimSystem.Models.Claim>

@{
    ViewData["Title"] = "Track Claims";
}

<div class="container mt-4">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-md-8">
            <h2 class="fw-bold">
                <i class="bi bi-search me-2 text-primary"></i>Track Claim Status
            </h2>
            <p class="text-muted">Monitor your claims in real-time from submission to approval</p>
        </div>
        <div class="col-md-4 text-end">
            <a asp-action="Submit" class="btn btn-primary">
                <i class="bi bi-plus-circle me-2"></i>New Claim
            </a>
        </div>
    </div>

    <!-- Success/Error Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show shadow-sm" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i>
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show shadow-sm" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <!-- Statistics Cards -->
    <div class="row g-3 mb-4">
        <div class="col-md-3">
            <div class="stat-card bg-primary text-white">
                <div class="stat-icon">
                    <i class="bi bi-file-earmark-text"></i>
                </div>
                <div class="stat-content">
                    <h3 class="stat-number">@Model.Count()</h3>
                    <p class="stat-label">Total Claims</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card bg-warning text-dark">
                <div class="stat-icon">
                    <i class="bi bi-clock-history"></i>
                </div>
                <div class="stat-content">
                    <h3 class="stat-number">@Model.Count(c => c.Status == "Pending")</h3>
                    <p class="stat-label">Pending</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card bg-success text-white">
                <div class="stat-icon">
                    <i class="bi bi-check-circle"></i>
                </div>
                <div class="stat-content">
                    <h3 class="stat-number">@Model.Count(c => c.Status == "Approved")</h3>
                    <p class="stat-label">Approved</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card bg-danger text-white">
                <div class="stat-icon">
                    <i class="bi bi-x-circle"></i>
                </div>
                <div class="stat-content">
                    <h3 class="stat-number">@Model.Count(c => c.Status == "Rejected")</h3>
                    <p class="stat-label">Rejected</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Filter Section -->
    <div class="card border-0 shadow-sm mb-4">
        <div class="card-body">
            <div class="row align-items-end">
                <div class="col-md-3">
                    <label class="form-label fw-semibold">
                        <i class="bi bi-funnel me-1"></i>Filter by Status
                    </label>
                    <select id="statusFilter" class="form-select form-select-lg">
                        <option value="all">All Claims</option>
                        <option value="Pending">Pending</option>
                        <option value="Approved">Approved</option>
                        <option value="Rejected">Rejected</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label fw-semibold">
                        <i class="bi bi-search me-1"></i>Search
                    </label>
                    <input type="text" id="searchInput" class="form-control form-control-lg" placeholder="Search by name, email, or ID">
                </div>
                <div class="col-md-3">
                    <label class="form-label fw-semibold">
                        <i class="bi bi-sort-down me-1"></i>Sort By
                    </label>
                    <select id="sortBy" class="form-select form-select-lg">
                        <option value="date-desc">Newest First</option>
                        <option value="date-asc">Oldest First</option>
                        <option value="amount-desc">Highest Amount</option>
                        <option value="amount-asc">Lowest Amount</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <button id="clearFilters" class="btn btn-outline-secondary btn-lg w-100">
                        <i class="bi bi-x-circle me-2"></i>Clear Filters
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Claims Table -->
    <div class="card border-0 shadow-lg">
        <div class="card-header bg-gradient-primary text-white py-3">
            <h5 class="mb-0">
                <i class="bi bi-list-ul me-2"></i>All Claims
            </h5>
        </div>
        <div class="card-body p-0">
            @if (Model.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover mb-0" id="claimsTable">
                        <thead class="table-light">
                            <tr>
                                <th class="px-4 py-3">
                                    <i class="bi bi-hash me-1"></i>Claim ID
                                </th>
                                <th class="py-3">
                                    <i class="bi bi-person me-1"></i>Lecturer
                                </th>
                                <th class="py-3">
                                    <i class="bi bi-envelope me-1"></i>Email
                                </th>
                                <th class="py-3">
                                    <i class="bi bi-clock me-1"></i>Hours
                                </th>
                                <th class="py-3">
                                    <i class="bi bi-currency-dollar me-1"></i>Rate
                                </th>
                                <th class="py-3">
                                    <i class="bi bi-cash-stack me-1"></i>Total
                                </th>
                                <th class="py-3">
                                    <i class="bi bi-calendar me-1"></i>Date
                                </th>
                                <th class="py-3 text-center">
                                    <i class="bi bi-flag me-1"></i>Status
                                </th>
                                <th class="py-3 text-center">
                                    <i class="bi bi-paperclip me-1"></i>Document
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var claim in Model)
                            {
                                <tr class="claim-row"
                                    data-status="@claim.Status"
                                    data-amount="@claim.TotalAmount"
                                    data-date="@claim.DateSubmitted.ToString("yyyy-MM-dd")"
                                    data-search="@claim.LecturerName @claim.LecturerEmail @claim.Id">
                                    <td class="px-4 py-3 fw-bold text-primary">#@claim.Id</td>
                                    <td class="py-3">
                                        <div class="d-flex align-items-center">
                                            <div class="avatar-circle me-2">
                                                @claim.LecturerName.Substring(0, 1).ToUpper()
                                            </div>
                                            <span class="fw-semibold">@claim.LecturerName</span>
                                        </div>
                                    </td>
                                    <td class="py-3 text-muted">@claim.LecturerEmail</td>
                                    <td class="py-3">@claim.HoursWorked hrs</td>
                                    <td class="py-3">R @claim.HourlyRate.ToString("N2")</td>
                                    <td class="py-3 fw-bold">R @claim.TotalAmount.ToString("N2")</td>
                                    <td class="py-3">
                                        <small>@claim.DateSubmitted.ToString("dd MMM yyyy")</small>
                                        <br>
                                        <small class="text-muted">@claim.DateSubmitted.ToString("HH:mm")</small>
                                    </td>
                                    <td class="py-3 text-center">
                                        @if (claim.Status == "Pending")
                                        {
                                            <span class="status-badge status-pending">
                                                <i class="bi bi-clock-history me-1"></i>
                                                <span class="status-text">Pending</span>
                                            </span>
                                            <div class="progress mt-2" style="height: 6px;">
                                                <div class="progress-bar bg-warning progress-bar-animated"
                                                     role="progressbar"
                                                     style="width: 50%"
                                                     aria-valuenow="50"
                                                     aria-valuemin="0"
                                                     aria-valuemax="100"></div>
                                            </div>
                                        }
                                        else if (claim.Status == "Approved")
                                        {
                                            <span class="status-badge status-approved">
                                                <i class="bi bi-check-circle-fill me-1"></i>
                                                <span class="status-text">Approved</span>
                                            </span>
                                            <div class="progress mt-2" style="height: 6px;">
                                                <div class="progress-bar bg-success"
                                                     role="progressbar"
                                                     style="width: 100%"
                                                     aria-valuenow="100"
                                                     aria-valuemin="0"
                                                     aria-valuemax="100"></div>
                                            </div>
                                        }
                                        else if (claim.Status == "Rejected")
                                        {
                                            <span class="status-badge status-rejected">
                                                <i class="bi bi-x-circle-fill me-1"></i>
                                                <span class="status-text">Rejected</span>
                                            </span>
                                            <div class="progress mt-2" style="height: 6px;">
                                                <div class="progress-bar bg-danger"
                                                     role="progressbar"
                                                     style="width: 100%"
                                                     aria-valuenow="100"
                                                     aria-valuemin="0"
                                                     aria-valuemax="100"></div>
                                            </div>
                                        }
                                    </td>
                                    <td class="py-3 text-center">
                                        @if (!string.IsNullOrEmpty(claim.FilePath))
                                        {
                                            <a href="@claim.FilePath"
                                               target="_blank"
                                               class="btn btn-sm btn-outline-primary"
                                               title="@claim.FileName">
                                                <i class="bi bi-download me-1"></i>View
                                            </a>
                                        }
                                        else
                                        {
                                            <span class="text-muted small">No file</span>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <div class="empty-state">
                        <i class="bi bi-inbox text-muted"></i>
                        <h4 class="mt-3 text-muted">No Claims Found</h4>
                        <p class="text-muted">You haven't submitted any claims yet.</p>
                        <a asp-action="Submit" class="btn btn-primary mt-3">
                            <i class="bi bi-plus-circle me-2"></i>Submit Your First Claim
                        </a>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Legend -->
    <div class="card border-0 shadow-sm mt-4">
        <div class="card-body">
            <h6 class="fw-bold mb-3">
                <i class="bi bi-info-circle me-2"></i>Status Legend
            </h6>
            <div class="row g-3">
                <div class="col-md-4">
                    <div class="d-flex align-items-center">
                        <span class="status-badge status-pending me-2">
                            <i class="bi bi-clock-history me-1"></i>Pending
                        </span>
                        <small class="text-muted">Awaiting review</small>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="d-flex align-items-center">
                        <span class="status-badge status-approved me-2">
                            <i class="bi bi-check-circle-fill me-1"></i>Approved
                        </span>
                        <small class="text-muted">Claim approved</small>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="d-flex align-items-center">
                        <span class="status-badge status-rejected me-2">
                            <i class="bi bi-x-circle-fill me-1"></i>Rejected
                        </span>
                        <small class="text-muted">Claim rejected</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Custom CSS -->
<style>
    .stat-card {
        border-radius: 1rem;
        padding: 1.5rem;
        display: flex;
        align-items: center;
        gap: 1rem;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 15px rgba(0,0,0,0.2);
        }

    .stat-icon {
        font-size: 2.5rem;
        opacity: 0.8;
    }

    .stat-content {
        flex: 1;
    }

    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        margin: 0;
    }

    .stat-label {
        margin: 0;
        opacity: 0.9;
        font-size: 0.9rem;
    }

    .status-badge {
        display: inline-flex;
        align-items: center;
        padding: 0.5rem 1rem;
        border-radius: 2rem;
        font-weight: 600;
        font-size: 0.875rem;
        white-space: nowrap;
    }

    .status-pending {
        background-color: #fff3cd;
        color: #856404;
        border: 2px solid #ffc107;
    }

    .status-approved {
        background-color: #d1e7dd;
        color: #0f5132;
        border: 2px solid #198754;
    }

    .status-rejected {
        background-color: #f8d7da;
        color: #842029;
        border: 2px solid #dc3545;
    }

    .avatar-circle {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 1.1rem;
    }

    .table-hover tbody tr:hover {
        background-color: #f8f9fa;
        cursor: pointer;
    }

    .empty-state i {
        font-size: 5rem;
    }

    .bg-gradient-primary {
        background: linear-gradient(135deg, #0d6efd 0%, #0a58ca 100%);
    }

    .claim-row.hidden {
        display: none;
    }

    .progress {
        border-radius: 10px;
        overflow: hidden;
    }
</style>

<!-- JavaScript for Filtering and Sorting -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const statusFilter = document.getElementById('statusFilter');
        const searchInput = document.getElementById('searchInput');
        const sortBy = document.getElementById('sortBy');
        const clearFilters = document.getElementById('clearFilters');
        const claimRows = document.querySelectorAll('.claim-row');

        function filterAndSortClaims() {
            const statusValue = statusFilter.value;
            const searchValue = searchInput.value.toLowerCase();
            let visibleRows = [];

            // Filter claims
            claimRows.forEach(row => {
                const status = row.getAttribute('data-status');
                const searchText = row.getAttribute('data-search').toLowerCase();

                const statusMatch = statusValue === 'all' || status === statusValue;
                const searchMatch = searchText.includes(searchValue);

                if (statusMatch && searchMatch) {
                    row.classList.remove('hidden');
                    visibleRows.push(row);
                } else {
                    row.classList.add('hidden');
                }
            });

            // Sort visible rows
            const sortValue = sortBy.value;
            visibleRows.sort((a, b) => {
                if (sortValue === 'date-desc') {
                    return b.getAttribute('data-date').localeCompare(a.getAttribute('data-date'));
                } else if (sortValue === 'date-asc') {
                    return a.getAttribute('data-date').localeCompare(b.getAttribute('data-date'));
                } else if (sortValue === 'amount-desc') {
                    return parseFloat(b.getAttribute('data-amount')) - parseFloat(a.getAttribute('data-amount'));
                } else if (sortValue === 'amount-asc') {
                    return parseFloat(a.getAttribute('data-amount')) - parseFloat(b.getAttribute('data-amount'));
                }
            });

            // Reorder rows
            const tbody = document.querySelector('#claimsTable tbody');
            visibleRows.forEach(row => tbody.appendChild(row));
        }

        // Event listeners
        statusFilter.addEventListener('change', filterAndSortClaims);
        searchInput.addEventListener('input', filterAndSortClaims);
        sortBy.addEventListener('change', filterAndSortClaims);

        clearFilters.addEventListener('click', function() {
            statusFilter.value = 'all';
            searchInput.value = '';
            sortBy.value = 'date-desc';
            filterAndSortClaims();
        });

        // Real-time update simulation (optional - for demo purposes)
        setInterval(function() {
            // This simulates real-time updates
            // In production, you'd use SignalR or polling
        }, 5000);
    });
</script>